/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2021-07-07 02:47:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._04_005fboard_005fex;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board_ex.model.*;
import board_ex.service.*;
import java.util.*;

public final class BoardListPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("board_ex.service");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("board_ex.model");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
  //웹브라우저가 게시글 목록을 캐싱할 경우 새로운 글이 추가되더라도 새글이 목록에 안 보일 수 있기 때문에 설정
	response.setHeader("Pragma","No-cache");		// HTTP 1.0 version
	response.setHeader("Cache-Control","no-cache");	// HTTP 1.1 version
	response.setHeader("Cache-Control","no-store"); // 일부 파이어폭스 버스 관련
	response.setDateHeader("Expires", 1L);			// 현재 시간 이전으로 만료일을 지정함으로써 응답결과가 캐쉬되지 않도록 설정

      out.write("\r\n");
      out.write("\r\n");

ListArticleService service = ListArticleService.getInstance();

// 페이지 별 메세지 레코드 검색
int start=0;
int length=10;

start = (request.getParameter("seq")==null) ? 0 : length*Integer.parseInt(request.getParameter("seq"));

int totalCount = service.getTotalCount();


// 화면에 띄울 페이지 번호 수 출력
int pagenum = (totalCount%length==0) ? totalCount/length : totalCount/length+1;

ArrayList<BoardVO> mList =  service.getPageList(start, length);

 

      out.write("\r\n");
      out.write(" <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"\r\n");
      out.write("	integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\r\n");
      out.write("	crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("	\r\n");
      out.write("var pg = $(\".pg\");\r\n");
      out.write("	pg.css(\"cursor\",\"pointer\").click(function(){\r\n");
      out.write("		var seq = $(this).attr('id');\r\n");
      out.write("		location.href='BoardListPage.jsp?seq='+seq;\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("})\r\n");
      out.write("</script>\r\n");
      out.write("	\r\n");
      out.write("<HTML>\r\n");
      out.write("<head>\r\n");
      out.write("<!-- Required meta tags -->\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("\r\n");
      out.write("    <!-- Bootstrap CSS -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\r\n");
      out.write("        integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<title> 게시글 목록 </title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<BODY>\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "navbar.jsp", out, false);
      out.write("\r\n");
      out.write("<div class=\"mt-5 ml-5 mr-5\" >\r\n");
      out.write("\r\n");
      out.write("	<table class=\"table table-hover table-bordered \" >\r\n");
      out.write("	<thead>\r\n");
      out.write("	<tr class=\"text-center\">\r\n");
      out.write("		<th> 글번호 </th>\r\n");
      out.write("		<th> 제 목 </th>\r\n");
      out.write("		<th> 작성자 </th>\r\n");
      out.write("		<th> 작성일 </th>\r\n");
      out.write("		<th> 조회수 </th>\r\n");
      out.write("	</tr>\r\n");
      out.write("	</thead>\r\n");
      out.write("	<tbody>\r\n");
      out.write("	");
 if( mList.isEmpty() ) { 
      out.write("\r\n");
      out.write("		<tr><td colspan=\"5\"> 등록된 게시물이 없습니다. </td></tr>\r\n");
      out.write("	");
 } else { 
      out.write('\r');
      out.write('\n');
      out.write('	');

		for(int i=0;i<mList.size();i++)
		{
			
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("			<td class=\"text-center\">");
      out.print(mList.get(i).getSeq() );
      out.write("</td>\r\n");
      out.write("			<td><a href=\"BoardView.jsp?seq=");
      out.print(mList.get(i).getSeq() );
      out.write('"');
      out.write('>');
      out.print(mList.get(i).getTitle() );
      out.write("</a></td>\r\n");
      out.write("			<td class=\"text-center\">");
      out.print(mList.get(i).getWriter() );
      out.write("</td>\r\n");
      out.write("			<td class=\"text-center\">");
      out.print(mList.get(i).getRegdate() );
      out.write("</td>\r\n");
      out.write("			<td class=\"text-center\">");
      out.print(mList.get(i).getCnt() );
      out.write("</td>\r\n");
      out.write("			");

		}
	
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	");
 }  
      out.write("\r\n");
      out.write("	</tbody>	\r\n");
      out.write("	</table>\r\n");
      out.write("	<nav aria-label=\"Page navigation example\">\r\n");
      out.write("  <ul class=\"pagination justify-content-center\">\r\n");
      out.write("    <li class=\"page-item disabled\">\r\n");
      out.write("      <a class=\"page-link\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Previous</a>\r\n");
      out.write("    </li>\r\n");
      out.write("    ");
 for(int i=0;i<pagenum%5;i++){
    	
      out.write("\r\n");
      out.write("    	  <li class=\"page-item\"><a class=\"pg page-link\" id=");
      out.print(i );
      out.write('>');
      out.print( (i+1) );
      out.write("</a></li>\r\n");
      out.write("    	");

    }
    	
      out.write("\r\n");
      out.write("  \r\n");
      out.write("    <li class=\"page-item\">\r\n");
      out.write("      <a class=\"page-link\" href=\"#\">Next</a>\r\n");
      out.write("    </li>\r\n");
      out.write("  </ul>\r\n");
      out.write("</nav>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<input type=\"button\" value=\"글쓰기\" onclick=\"location.href='BoardInputForm.jsp'\" class=\"btn btn-warning float-right\">\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<!-- Optional JavaScript -->\r\n");
      out.write("    <!-- jQuery first, then Popper.js, then Bootstrap JS -->\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\r\n");
      out.write("        integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\r\n");
      out.write("        crossorigin=\"anonymous\"></script>\r\n");
      out.write("    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\"\r\n");
      out.write("        integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\"\r\n");
      out.write("        crossorigin=\"anonymous\"></script>\r\n");
      out.write("    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"\r\n");
      out.write("        integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\"\r\n");
      out.write("        crossorigin=\"anonymous\"></script>\r\n");
      out.write("</BODY>\r\n");
      out.write("</HTML>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
